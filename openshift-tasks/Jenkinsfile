#!groovy
podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/${GUID}-jenkins/jenkins-agent-appdev",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi",
      resourceRequestCpu: "1",
      resourceLimitCpu: "2"
    )
  ]
) {
  node('skopeo-pod') {
    echo "Starting Jenkinsfile"
    // Define Maven Command to point to the correct
    // settings for our Nexus installation
    def mvnCmd = "mvn -s ../nexus_settings.xml"

    // Checkout Source Code.
    stage('Checkout Source') {
      checkout scm
    }

    // Build the Tasks Service
    dir('openshift-tasks') {
      // The following variables need to be defined at the top level
      // and not inside the scope of a stage - otherwise they would not
      // be accessible from other stages.
      // Extract version from the pom.xml
      def version = getVersionFromPom("pom.xml")

      // TBD Set the tag for the development image: version + build number
      def devTag  = version + "-" + "${env.BUILD_NUMBER}"
      // Set the tag for the production image: version
      def prodTag = version

      def templatePath = '../bin/eap71-basic-s2i.yml'

      // Set Development and Production Project Names
      def jenkinsProject = "${GUID}-jenkins"
      def devProject  = "${GUID}-tasks-dev"
      def prodProject = "${GUID}-tasks-prod"

      // Using Maven build the war file
      // Do not run tests in this step
      stage('Build war') {
        echo "Building version ${devTag}"

        // TBD: Execute Maven Build
        sh "${mvnCmd} clean package -DskipTests"
      }

      // TBD: The next two stages should run in parallel

      // Using Maven run the unit tests
      stage('Unit Tests') {
        echo "Running Unit Tests"

        // TBD: Execute Unit Tests
        //sh "${mvnCmd} test"
      }

      // Using Maven to call SonarQube for Code Analysis
      stage('Code Analysis') {
        echo "Running Code Analysis"

        // TBD: Execute Sonarqube Tests
        //sh "${mvnCmd} sonar:sonar -Dsonar.host.url=http://sonarqube.gpte-hw-cicd.svc.cluster.local:9000/ -Dsonar.projectName=${JOB_BASE_NAME}-${devTag}"
      }

      // Publish the built war file to Nexus
      stage('Publish to Nexus') {
        echo "Publish to Nexus"

        // TBD: Publish to Nexus
        sh "${mvnCmd} deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::http://nexus3.gpte-hw-cicd.svc.cluster.local:8081/repository/releases/"
      }

      // Build the OpenShift Image in OpenShift and tag it.
      stage('Build and Tag OpenShift Image') {

        // TBD: Build Image, tag Image
          echo "Building OpenShift container image tasks !: ${devTag}"

            // Start Binary Build in OpenShift using the file we just published
            // The filename is openshift-tasks.war in the 'target' directory of your current
            // Jenkins workspace
            script {
              openshift.withCluster() {
                openshift.withProject("${devProject}") {
                  echo "Using project!: ${devProject}"
                  echo "Running openshift.selector.exists()"
                // start build of image based on standard eap template
                  def buildConfig = openshift.selector("bc", "tasks")
                  if (!(buildConfig.exists())) {
                      echo "bc does not exist... create newBuild"
                      buildConfig = openshift.newBuild("--name=tasks", "--image-stream=jboss-eap71-openshift:1.3", "--binary")
                  }
                  echo("Running newBuild()")
                  //buildConfig.startBuild("--from-file=./target/openshift-tasks.war", "--wait=true")
                  buildConfig.startBuild("--from-file=http://nexus3.gpte-hw-cicd.svc.cluster.local:8081/repository/releases/org/jboss/quickstarts/eap/tasks/${version}/tasks-${version}.war", "--wait=true")
                  // OR use the file you just published into Nexus:
                  // "--from-file=http://nexus3.${prefix}-nexus.svc.cluster.local:8081/repository/releases/org/jboss/quickstarts/eap/tasks/${version}/tasks-${version}.war"
                  echo "Running openshift.tag"
                  openshift.tag("tasks:latest", "tasks:${devTag}")

                  // clean up bc
                  //openshift.delete("bc", "tasks")

                }
              }
            }

      }

      // Copy Image to Nexus container registry
      stage('Copy Image to Nexus container registry') {
        echo "Copy image to Nexus container registry"

        // TBD: Copy image to Nexus container registry
        echo "Copy the tested container image to the shared Nexus container registry"
        echo "apply cred file workaround"
        sh 'oc whoami -t > result'
        def token = readFile('result').trim()
        //sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds openshift:${token} --dest-creds admin:redhat docker://docker-registry.default.svc.cluster.local:5000/${jenkinsProject}/tasks:${devTag} docker://nexus3-registry-gpte-hw-cicd.apps.na311.openshift.opentlc.com/tasks:${devTag}"
        withEnv(["devTag=${devTag}"]){
          sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds=openshift:${token} --dest-creds=admin:redhat docker://docker-registry.default.svc.cluster.local:5000/${devProject}/tasks:${devTag} docker://nexus-registry.gpte-hw-cicd.svc.cluster.local:5000/tasks:${devTag}"
        }
        // TBD: Tag the built image with the production tag.
      }

      // Deploy the built image to the Development Environment.
      stage('Deploy to Dev') {
        echo "Deploying container image to Development Project ${devProject}"

        // TBD: Deploy to development Project
        //      Set Image, Set VERSION
        //      Make sure the application is running and ready before proceeding


        openshift.withCluster() {
          openshift.withProject("${devProject}") {
            echo "Trying to set image location in Nexus on dc/tasks in ${devProject}"

            openshift.set("image", "dc/tasks", "tasks=docker-registry.default.svc:5000/${devProject}/tasks:${devTag}")
            //openshift.set("image", "dc/tasks", "tasks=docker-registry.default.svc.cluster.local:5000/${jenkinsProject}/tasks:${devTag}")
            //openshift.set("image", "dc/tasks", "tasks=nexus-registry.gpte-hw-cicd.svc.cluster.local:5000/tasks:${devTag}")

            //openshift.set("env", "dc/tasks", "VERSION=${devTag} (tasks-dev)")
            withEnv(["devTag=${devTag}","devProject=${devProject}"]){
              sh 'oc set env dc/tasks VERSION="${devTag} (tasks-dev)" -n ${devProject}'
            }

            // Deploy the development application.
            openshift.selector("dc", "tasks").rollout().latest();
            // Wait for application to be deployed
            def dc = openshift.selector("dc", "tasks").object()
            def dc_version = dc.status.latestVersion
            def rc = openshift.selector("rc", "tasks-${dc_version}").object()

            echo "Waiting for ReplicationController tasks-${dc_version} to be ready"
            while (rc.spec.replicas != rc.status.readyReplicas) {
              sleep 5
              rc = openshift.selector("rc", "tasks-${dc_version}").object()
            }

            // tag with prod
            withEnv(["devTag=${devTag}","prodTag=${prodTag}","devProject=${devProject}"]){
              sh 'oc tag tasks:${devTag} tasks:${prodTag} -n ${devProject}'
            }

          }

        }

      }



      // Blue/Green Deployment into Production
      // -------------------------------------
      withEnv(["prodProject=${prodProject}"]){
        sh "oc get route tasks --template='{{.spec.to.name}}' -n ${prodProject} > activeApp"
      }
      def activeApp = readFile('activeApp').trim()
      def destApp = ""
      if (activeApp == "tasks-blue") {
         destApp   = "tasks-green"
      }
      else {
         destApp   = "tasks-blue"
      }

      stage('Blue/Green Production Deployment') {
        echo "Blue/Green Deployment"
        // TBD: Determine which application is active
        //      Set Image, Set VERSION
        //      Deploy into the other application
        //      Make sure the application is running and ready before proceeding
        withEnv(["destApp=${destApp}","prodTag=${prodTag}","prodProject=${prodProject}","devProject=${devProject}"]){
          sh 'oc set env dc/${destApp} VERSION="${prodTag} (tasks-blue)" -n ${prodProject}'
          sh "oc set image dc/${destApp} ${destApp}=docker-registry.default.svc:5000/${devProject}/tasks:${prodTag} -n ${prodProject}"

          // rollout blue
          sh "oc rollout latest dc/${destApp} -n ${prodProject}"
          // route points to blue so good

          // also deploy Green
          sh 'oc set env dc/${activeApp} VERSION="${prodTag} (tasks-green)" -n ${prodProject}'
          sh "oc set image dc/${activeApp} ${activeApp}=docker-registry.default.svc:5000/${devProject}/tasks:${prodTag} -n ${prodProject}"
          sh "oc rollout latest dc/${activeApp} -n ${prodProject}"
        }
      }

      stage('Switch over to new Version') {
        echo "Switching Production application to ${destApp}."
        // TBD: Execute switch
        withEnv(["destApp=${destApp}","prodProject=${prodProject}"]){
         echo "Switching Production application to ${destApp}."
         sh "oc patch route/tasks -p \'{\"spec\":{\"to\":{\"name\":\"${destApp}\"}}}\' -n ${prodProject}"
        }
      }
    }
  }
}

// Convenience Functions to read version from the pom.xml
// Do not change anything below this line.
// --------------------------------------------------------
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
