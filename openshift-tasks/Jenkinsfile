#!groovy
podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/${GUID}-jenkins/jenkins-agent-appdev",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi",
      resourceRequestCpu: "1",
      resourceLimitCpu: "2"
    )
  ]
) {
  node('skopeo-pod') {
    // Define Maven Command to point to the correct
    // settings for our Nexus installation
    def mvnCmd = "mvn -s ../nexus_settings.xml"

    // Checkout Source Code.
    stage('Checkout Source') {
      checkout scm
    }

    // Build the Tasks Service
    dir('openshift-tasks') {
      // The following variables need to be defined at the top level
      // and not inside the scope of a stage - otherwise they would not
      // be accessible from other stages.
      // Extract version from the pom.xml
      def version = getVersionFromPom("pom.xml")

      // TBD Set the tag for the development image: version + build number
      def devTag  = version + "-" + "${env.BUILD_NUMBER}"
      // Set the tag for the production image: version
      def prodTag = version

      def templatePath = '../bin/eap71-basic-s2i.yml'

      // Set Development and Production Project Names
      def devProject  = "${GUID}-tasks-dev"
      def prodProject = "${GUID}-tasks-prod"

      // Using Maven build the war file
      // Do not run tests in this step
      stage('Build war') {
        echo "Building version ${devTag}"

        // TBD: Execute Maven Build
        sh "${mvnCmd} clean package -DskipTests"
      }

      // TBD: The next two stages should run in parallel

      // Using Maven run the unit tests
      stage('Unit Tests') {
        echo "Running Unit Tests"

        // TBD: Execute Unit Tests
        //sh "${mvnCmd} test"
      }

      // Using Maven to call SonarQube for Code Analysis
      stage('Code Analysis') {
        echo "Running Code Analysis"

        // TBD: Execute Sonarqube Tests
        //sh "${mvnCmd} sonar:sonar -Dsonar.host.url=http://sonarqube.gpte-hw-cicd.svc.cluster.local:9000/ -Dsonar.projectName=${JOB_BASE_NAME}-${devTag}"
      }

      // Publish the built war file to Nexus
      stage('Publish to Nexus') {
        echo "Publish to Nexus"

        // TBD: Publish to Nexus
        //sh "${mvnCmd} deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::http://nexus3.gpte-hw-cicd.svc.cluster.local:8081/repository/releases/"
      }

      // Build the OpenShift Image in OpenShift and tag it.
      stage('Build and Tag OpenShift Image') {

        // TBD: Build Image, tag Image
          echo "Building OpenShift container image tasks: ${devTag}"

            // Start Binary Build in OpenShift using the file we just published
            // The filename is openshift-tasks.war in the 'target' directory of your current
            // Jenkins workspace
            script {
              openshift.withCluster() {
                openshift.withProject() {
                  echo "Using project: ${openshift.project()}"
                  echo "Running openshift.selector"
                  // if not already exists
                  if (!openshift.selector("bc", "tasks-bc").exists()) {
                    // Create image build config
                    echo "bc does not exist..."
                    def np = openshift.newBuild("--name=tasks-bc", "--image-stream=jboss-eap71-openshift:1.3", "--binary")
                    echo "newBuild created: ${nb.count()} objects : ${nb.names()}"
                  }


                  // start build of image based on standard eap template
                  openshift.selector("bc", "tasks-bc").startBuild("--from-file=./target/openshift-tasks.war", "--wait=true")

                  // OR use the file you just published into Nexus:
                  // "--from-file=http://nexus3.${prefix}-nexus.svc.cluster.local:8081/repository/releases/org/jboss/quickstarts/eap/tasks/${version}/tasks-${version}.war"
                  echo "Running openshift.tag"
                  openshift.tag("tasks:latest", "tasks:${devTag}")
                }
              }
            }




      }

      // Deploy the built image to the Development Environment.
      stage('Deploy to Dev') {
        echo "Deploying container image to Development Project ${devProject}"

        // TBD: Deploy to development Project
        //      Set Image, Set VERSION
        //      Make sure the application is running and ready before proceeding
//        openshift.withCluster() {
//          openshift.withProject("${devProject}") {
//            openshift.set("image", "dc/tasks", "tasks=docker-registry.default.svc:5000/${devProject}/tasks:${devTag}")
            // Deploy the development application.
//            openshift.selector("dc", "tasks").rollout().latest();
            // Wait for application to be deployed
//            def dc = openshift.selector("dc", "tasks").object()
//            def dc_version = dc.status.latestVersion
//            def rc = openshift.selector("rc", "tasks-${dc_version}").object()

//            echo "Waiting for ReplicationController tasks-${dc_version} to be ready"
//            while (rc.spec.replicas != rc.status.readyReplicas) {
//              sleep 5
//              rc = openshift.selector("rc", "tasks-${dc_version}").object()
//            }

//          }

//        }



      }

      // Copy Image to Nexus container registry
      stage('Copy Image to Nexus container registry') {
        echo "Copy image to Nexus container registry"

        // TBD: Copy image to Nexus container registry

        // TBD: Tag the built image with the production tag.
      }

      // Blue/Green Deployment into Production
      // -------------------------------------
      def destApp   = "tasks-green"
      def activeApp = ""

      stage('Blue/Green Production Deployment') {
        // TBD: Determine which application is active
        //      Set Image, Set VERSION
        //      Deploy into the other application
        //      Make sure the application is running and ready before proceeding
      }

      stage('Switch over to new Version') {
        echo "Switching Production application to ${destApp}."
        // TBD: Execute switch
      }
    }
  }
}

// Convenience Functions to read version from the pom.xml
// Do not change anything below this line.
// --------------------------------------------------------
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
